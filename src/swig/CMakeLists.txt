
MACRO(swig_wrap_lib name)
  SET( SWIG_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${name}_wrap.cxx" )
  SET( SWIG_INPUT "${CMAKE_CURRENT_SOURCE_DIR}/${name}.i" )

  ADD_CUSTOM_COMMAND (
   OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/${name}_wrap.cxx
   COMMAND ${CMAKE_COMMAND} -E echo_append "Creating wrapper code..."
  #COMMAND ${SWIG_EXECUTABLE} -c++ -ruby -autorename -xmlout parse.xml -I/usr/include swig/zypp.i
   COMMAND ${SWIG_EXECUTABLE} -I${YAST_INCLUDE_DIR} -c++ -ruby -autorename -xmlout ${CMAKE_CURRENT_BINARY_DIR}/parse.xml -o ${CMAKE_CURRENT_BINARY_DIR}/${name}_wrap.cxx -I${ZYPP_INCLUDE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/${name}.i
   COMMAND ${CMAKE_COMMAND} -E echo "Done."
   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${name}.i
)

  ADD_CUSTOM_TARGET( ${name}_glue
     DEPENDS ${SWIG_OUTPUT}
  )

  ADD_LIBRARY( ${name}x SHARED "${CMAKE_CURRENT_BINARY_DIR}/${name}_wrap.cxx" )
  SET_TARGET_PROPERTIES( ${name}x PROPERTIES PREFIX "" )
  ADD_DEPENDENCIES( ${name}x ${name}_glue )
ENDMACRO(swig_wrap_lib)

INCLUDE_DIRECTORIES( ${RUBY_INCLUDE_PATH} )
INCLUDE_DIRECTORIES( ${YAST_INCLUDE_DIR} )

swig_wrap_lib(ycp)


TARGET_LINK_LIBRARIES( ycpx ${YAST_LIBRARY} )
TARGET_LINK_LIBRARIES( ycpx ${YAST_${NAME}_LIBRARY} )
#TARGET_LINK_LIBRARIES( ycpx ${YAST_PLUGIN_WFM_LIBRARY} )
TARGET_LINK_LIBRARIES( ycpx ${RUBY_LIBRARY} )

INSTALL(TARGETS ycpx LIBRARY DESTINATION ${RUBY_ARCH_DIR} )
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/ycp.rb DESTINATION
${RUBY_VENDORLIB_DIR} )



